{"version":3,"sources":["client.js"],"names":["scene","camera","renderer","hemiLight","spotLight","main","THREE","Scene","background","Color","windowsWidth","window","innerWidth","windowsHeight","innerHeight","antialias","WebGLRenderer","setSize","document","body","appendChild","domElement","add","HemisphereLight","spotLight1","bias","SpotLight","shadow","mapSize","height","width","toneMapping","ReinhardToneMapping","toneMappingExposure","aspect","PerspectiveCamera","position","enabled","set","materialArrays","OrbitControls","texture_dn","map","TextureLoader","load","push","MeshBasicMaterial","texture_up","side","BackSide","texture_lf","texture_ft","texture_bk","skyBox","geometry","GLTFLoader","model","result","children","object1","texture_rt","receiveShadow","AxesHelper","BoxGeometry","Mesh","draw","x","y","z","render","requestAnimationFrame","material","anisotropy"],"mappings":"aAEA,IAAAA,MAAAC,OAAAC,SAAAC,UAAAC,UAIA,SAASC,QAATL,MAASK,IAATC,MAAgBC,OACTC,WAAaD,IAAVD,MAARG,MAAA,UAGA,IAAMC,EAAeC,OAAOC,WACtBC,EAAgBF,OAAOG,aAEQC,SAAS,IAAET,MAAAU,cAAA,CAAAD,WAAA,KAAhDE,QAAAP,EAAAG,GACAX,SAASe,UAAQP,SAAjB,EAGAQ,SAASC,KAAKC,YAAYlB,SAASmB,YAGnCrB,IAAMsB,EAAInB,IAAVG,MAAAiB,gBAAA,SAAA,QAAA,KAEAvB,MAAMwB,IAAAA,GAENA,IAAAA,EAAkBC,IAAlBnB,MAA0BoB,UAA1B,SAAA,GACAF,EAAWG,YAAOC,EAClBJ,EAAWG,OAAOC,MAAQC,KAC1B7B,EAAUwB,OAAAA,QAAVM,MAAA,KAEA5B,EAAS6B,OAAAA,QAAczB,OAAM0B,KAC7B9B,MAAAA,IAAS+B,GAGT/B,SAAMgC,YAASxB,MAAeG,oBAC9BZ,SAASgC,oBAAUE,EACnBlC,SAAOmC,UAAPC,SAA2B,EAK3B,IAAAH,EAAAxB,EAAAG,GACAZ,OAAA,IAAAK,MAAA6B,kBAAA,GAAAD,EAAA,GAAA,MANOE,SAASE,KAAK,IAAM,IAAK,KAS5BC,IAAcjC,MAAlBkC,cAAAvC,OAAAC,SAAAmB,YAWMoB,SAMJ,IAAAF,EAAiB,GAKeG,GAAF,IAAApC,MAAAqC,eAAAC,KAAA,yCAE9BL,GAAeM,IACbvC,MAAIA,eAAMwC,KADGD,yCAAfE,GAAA,IAAAzC,MAAAqC,eAAAC,KAAA,yCAIiDI,GAAYC,IAAAA,MAAAA,eAAAA,KAAAA,yCAG7BP,GAAF,IAAApC,MAAAqC,eAAAC,KAAA,yCAE9BL,GAAeM,IACbvC,MAAIA,eAAMwC,KADGD,yCAGfN,EAAeM,KACiBH,IAAGpC,MAAE4C,kBAAP,CAAAR,IAAAS,EAAAH,KAAA1C,MAAA2C,YAAAV,EAD9BM,KAGD,IAAAvC,MAAAwC,kBAAA,CAAAJ,IAAAU,EAAAJ,KAAA1C,MAAA2C,YAGDV,EAAiBM,KACbQ,IAAAA,MAASP,kBAAeQ,CAAAA,IAAUf,EAAAA,KACtCjC,MAAA2C,YAEAV,EAAUgB,KACR,IAAIC,MAAQC,kBAAaC,CAAAA,IAAzBjB,EAAAO,KAAA1C,MAAA2C,YAEAO,EAAeX,KACb,IAAIc,MAAAA,kBAAgB,CAAAjB,IAAAkB,EAAAZ,KAAA1C,MAAA2C,YAElBU,EAAQE,KAfV,IAAIvD,MAAMwC,kBAAkB,CAAEJ,IAAKQ,EAAYF,KAAM1C,MAAM2C,YAoB1DjD,MAAAsB,IAAA,IAAAhB,MAAAwD,WAAA,MACF,IACDR,EAAA,IAAAhD,MAAAyD,YAAA,IAAA,IAAA,KAhBW,IAAIzD,MAAM0D,KAAKV,EAAUf,GAqBtC,SAAS0B,IACPzC,EAAWY,SAASE,IAClBrC,OAAOmC,SAAS8B,EAAI,GACpBjE,OAAOmC,SAAS+B,EAAI,IACpBlE,OAAOmC,SAASgC,EAAI,IAEtBlE,SAASmE,OAAOrE,MAAOC,QACvBqE,sBAAsBL,IATvB,IAhBD3D,MAAAiD,YAAAX,KAAA,2BAAA,SAAAa,GACE,IAAID,EAAQC,EAAOzD,MAAM0D,SAAS,GAiBpCF,EAAApB,SAAgBE,IAAA,IAAA,GAAA,GACdd,EAAAA,SAAWY,SAAAA,GAKXlC,EAASmE,SACTC,EAAAA,YAAsBL,EACvBN,EAAAE,eAAA,EAlBSF,EAAQY,SAAS7B,MAqBzBiB,EAAAY,SAAA7B,IAAA8B,WAAA,OAfAxE,MAAMsB,IAAIkC,GACVS,MAcJ5D","file":"client.min.js","sourcesContent":["// import * as THREE from \"/build/three.module.js\";\r\n// import { OrbitControls } from \"../scripts/three/examples/jsm/controls/OrbitControls.js\";\r\n// import Stats from \"/jsm/libs/stats.module.js\";\r\n\r\nlet scene, camera, renderer, hemiLight, spotLight;\r\n\r\nfunction main() {\r\n  scene = new THREE.Scene();\r\n  scene.background = new THREE.Color(0xffffff);\r\n\r\n  const windowsWidth = window.innerWidth;\r\n  const windowsHeight = window.innerHeight;\r\n\r\n  renderer = new THREE.WebGLRenderer({ antialias: true });\r\n  renderer.setSize(windowsWidth, windowsHeight);\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  document.body.appendChild(renderer.domElement);\r\n\r\n  const hemiLight = new THREE.HemisphereLight(0xffff33, 0x5b573d, 2.5);\r\n  scene.add(hemiLight);\r\n\r\n  const spotLight1 = new THREE.SpotLight(0xffffff, 3);\r\n  spotLight1.castShadow = true;\r\n  spotLight1.shadow.bias = -0.0001;\r\n  spotLight1.shadow.mapSize.width = 4096;\r\n  spotLight1.shadow.mapSize.height = 4096;\r\n  scene.add(spotLight1);\r\n\r\n  renderer.toneMapping = THREE.ReinhardToneMapping;\r\n  renderer.toneMappingExposure = 2;\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  const aspect = windowsWidth / windowsHeight;\r\n  camera = new THREE.PerspectiveCamera(90, aspect, 0.1, 40000);\r\n  camera.position.set(-3000, 200, 1000);\r\n\r\n  let control = new THREE.OrbitControls(camera, renderer.domElement);\r\n  //   controls.target.set(0, 0, 0);\r\n\r\n  // control.minDistance = 100;\r\n  // control.maxDistance = 200;\r\n  control.update();\r\n\r\n  let materialArrays = [];\r\n  {\r\n    let texture_ft = new THREE.TextureLoader().load(\r\n      `images/skybox1/greenery/meadow_ft.jpg`\r\n    );\r\n    let texture_bk = new THREE.TextureLoader().load(\r\n      `images/skybox1/greenery/meadow_bk.jpg`\r\n    );\r\n    let texture_up = new THREE.TextureLoader().load(\r\n      `images/skybox1/greenery/meadow_up.jpg`\r\n    );\r\n    let texture_dn = new THREE.TextureLoader().load(\r\n      `images/skybox1/greenery/meadow_dn.jpg`\r\n    );\r\n    let texture_rt = new THREE.TextureLoader().load(\r\n      `images/skybox1/greenery/meadow_rt.jpg`\r\n    );\r\n    let texture_lf = new THREE.TextureLoader().load(\r\n      `images/skybox1/greenery/meadow_lf.jpg`\r\n    );\r\n\r\n    materialArrays.push(\r\n      new THREE.MeshBasicMaterial({ map: texture_ft, side: THREE.BackSide })\r\n    );\r\n    materialArrays.push(\r\n      new THREE.MeshBasicMaterial({ map: texture_bk, side: THREE.BackSide })\r\n    );\r\n    materialArrays.push(\r\n      new THREE.MeshBasicMaterial({ map: texture_up, side: THREE.BackSide })\r\n    );\r\n    materialArrays.push(\r\n      new THREE.MeshBasicMaterial({ map: texture_dn, side: THREE.BackSide })\r\n    );\r\n    materialArrays.push(\r\n      new THREE.MeshBasicMaterial({ map: texture_rt, side: THREE.BackSide })\r\n    );\r\n    materialArrays.push(\r\n      new THREE.MeshBasicMaterial({ map: texture_lf, side: THREE.BackSide })\r\n    );\r\n  }\r\n\r\n  scene.add(new THREE.AxesHelper(5000));\r\n  const geometry = new THREE.BoxGeometry(1000, 1000, 1000);\r\n  let skyBox = new THREE.Mesh(geometry, materialArrays);\r\n  // scene.add(skyBox);\r\n\r\n  new THREE.GLTFLoader().load(\"models/iguana/scene.gltf\", (result) => {\r\n    let model = result.scene.children[0];\r\n    model.position.set(100.0, 2.0, -3.0);\r\n    model.traverse((object1) => {\r\n      if (object1.isMesh) {\r\n        object1.castShadow = true;\r\n        object1.receiveShadow = true;\r\n\r\n        if (object1.material.map) {\r\n          object1.material.map.anisotropy = 16;\r\n        }\r\n      }\r\n    });\r\n    // spotLight1.target = model;\r\n    scene.add(model);\r\n    draw();\r\n  });\r\n\r\n  function draw() {\r\n    spotLight1.position.set(\r\n      camera.position.x + 25,\r\n      camera.position.y + 500,\r\n      camera.position.z + 25\r\n    );\r\n    renderer.render(scene, camera);\r\n    requestAnimationFrame(draw);\r\n  }\r\n}\r\n\r\nmain();\r\n"]}