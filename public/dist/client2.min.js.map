{"version":3,"sources":["client2.js"],"names":["THREE","_interopRequireWildcard","require","_OrbitControls","_GLTFLoader","main","canvas","document","getElementById","WebGLRenderer","Scene","background","Color","aspect","window","innerWidth","innerHeight","camera","PerspectiveCamera","position","set","OrbitControls","update","manager","LoadingManager","onLoad","parent","pig","_loop","model","_Object$values2","_i2","url","animationClip","gltf","animations","forEach","value","index","name","Object","values","models","manageAnimation","WorldObjectManger","cow","llama","pug","sheep","zebra","horse","renderer","knight","scene","windowsWidth","windowsHeight","_loop2","_Object$values","_i","controls","length","_classCallCheck","this","gameObjects","_createClass","key"],"mappings":"aAAA,IAAAA,MAAAC,wBAAAC,QAAA,gEACAC,eAAAD,QAAA,gFADAE,YAAAF,QAAA,ohGACA,SAAAG,OAIE,IAAMC,EAASC,SAASC,eAAe,eAHzC,IAAAR,MAAAS,cAAA,CAAAH,OAAAA,KAMgB,IAAIN,MAAMU,OAClBC,WAAa,IAAIX,MAAMY,MAAM,WAEnC,IAGMC,EAHeC,OAAOC,WACND,OAAOE,YAGzBC,EAAS,IAAIjB,MAAMkB,kBAAkB,GAAIL,EAAQ,GAAK,KAC1DI,EAAOE,SAASC,IAAI,EAAG,IAAK,IAEX,IAAIC,eAAAA,cAAcJ,EAAQX,GAClCgB,SAET,IAAMC,EAAU,IAAIvB,MAAMwB,eAC1BD,EAAQE,OAwEJC,YAtEJ,WACEC,IADa,IAAAC,EAAA,WACR,IAAAC,EAAAC,EAAAC,GACHC,EAAKC,cAAA,GAFMJ,EAAAK,KAAAC,WAAAC,QAAA,SAAAC,EAAAC,GAIVT,EAAEI,cAAAI,EAAAE,MAAAV,EAAAK,KAAAC,WAAAG,MAHLX,EAAAA,EAAAA,EAAKa,OAAAC,OAAAC,GAALf,EAAAA,EAAAA,OAAAA,IAAKC,IAsEJe,GA3FW,IAAAC,GAWd,IASA,IAAMF,EAAS,CACbf,IAAK,CACHK,IAAK,6EAEPa,IAAK,CACHb,IAAK,6EAEPc,MAAO,CACLd,IAAK,+EAEPe,IAAK,CACHf,IAAK,6EAEPgB,MAAO,CACLhB,IAAK,+EAEPiB,MAAO,CACLjB,IAAK,+EApCTkB,MAAM5C,CACA6C,IAAAA,+EAANC,OAAA,CAEMC,IAAK,yFAMLxC,EAASyC,IAAAA,YAAAA,WAAeC,GAbhCC,EAAA,WAcMvC,IAAAA,EAASwC,EAAAC,GACbzC,EAAOE,KAASC,EAAOY,IAAK,SAA5BE,GAEMyB,EAAAA,KAAWzB,KAHjBwB,EAAA,EAAAD,EAAiBzD,OAAMkB,OAAAA,GAAvBwC,EAAAD,EAAAG,OAAAF,IAAyCF,IAd3C,IAuBiBZ,EAvBjB,WAiCIG,SAAAA,IAAKc,gBAAAC,KAAAlB,GACHZ,KAAK+B,YAAA,GAlCX,OAAAC,aAAApB,EAAA,CAAA,CAAAqB,IAAA,mBAAA5B,MAAA,cAAA,CAAA4B,IAAA,mBAAA5B,MAAA,cAAA,CAAA4B,IAAA,SAAA5B,MAAA,gBAAAO,EAAA,GAuBiB,IAAAA,EA2EXvC","file":"client2.min.js","sourcesContent":["import * as THREE from \"https://cdn.skypack.dev/three@0.128.0/build/three.module.js\";\r\nimport { OrbitControls } from \"https://cdn.skypack.dev/three@0.128.0/examples/jsm/controls/OrbitControls.js\";\r\nimport { GLTFLoader } from \"https://cdn.skypack.dev/three/examples/jsm/loaders/GLTFLoader.js\";\r\n\r\nfunction main() {\r\n  const canvas = document.getElementById(\"main-canvas\");\r\n  const renderer = new THREE.WebGLRenderer({ canvas });\r\n\r\n  const scene = new THREE.Scene();\r\n  scene.background = new THREE.Color(\"#aaaaaa\");\r\n\r\n  const windowsWidth = window.innerWidth;\r\n  const windowsHeight = window.innerHeight;\r\n\r\n  const aspect = windowsWidth / windowsHeight;\r\n  let camera = new THREE.PerspectiveCamera(90, aspect, 0.1, 40000);\r\n  camera.position.set(0, 1.5, 20);\r\n\r\n  const controls = new OrbitControls(camera, canvas);\r\n  controls.update();\r\n\r\n  const manager = new THREE.LoadingManager();\r\n  manager.onLoad = init;\r\n\r\n  const models = {\r\n    pig: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/animals/Pig.gltf\",\r\n    },\r\n    cow: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/animals/Cow.gltf\",\r\n    },\r\n    llama: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/animals/Llama.gltf\",\r\n    },\r\n    pug: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/animals/Pug.gltf\",\r\n    },\r\n    sheep: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/animals/Sheep.gltf\",\r\n    },\r\n    zebra: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/animals/Zebra.gltf\",\r\n    },\r\n    horse: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/animals/Horse.gltf\",\r\n    },\r\n    knight: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/knight/KnightCharacter.gltf\",\r\n    },\r\n  };\r\n\r\n  let gltfLoader = new GLTFLoader(manager);\r\n  for (let model of Object.values(models)) {\r\n    gltfLoader.load(model.url, (gltf) => {\r\n      model.gltf = gltf;\r\n    });\r\n  }\r\n\r\n  function manageAnimation() {\r\n    for (const model of Object.values(models)) {\r\n      model.animationClip = {};\r\n      model.gltf.animations.forEach((value, index) => {\r\n        model.animationClip[value.name] = model.gltf.animations[index];\r\n      });\r\n    }\r\n  }\r\n\r\n  class WorldObjectManger {\r\n    constructor() {\r\n      this.gameObjects = [];\r\n    }\r\n    createGameObject() {}\r\n    removeGameObject() {}\r\n    update() {}\r\n  }\r\n\r\n  const worldObjectManager = new WorldObjectManger();\r\n\r\n  const generateHash = (string) => {\r\n    var hash = 0;\r\n    if (string.length == 0) return hash;\r\n    for (i = 0; i < string.length; i++) {\r\n      char = string.charCodeAt(i);\r\n      hash = (hash << 5) - hash + char;\r\n      hash = hash & hash;\r\n    }\r\n    return hash;\r\n  };\r\n\r\n  class GameObject {\r\n    constructor(parent, objectName) {\r\n      this.name = objectName;\r\n      this.components = new Array();\r\n      this.objectRoot = new THREE.Object3D();\r\n      parent.add(this.objectRoot);\r\n    }\r\n\r\n    addComp(ComponentName) {\r\n      // create component in advance and pass\r\n      // if (!component.componentID) {\r\n      //   console.warn(\"this is not an instance of component\");\r\n      //   return this;\r\n      // }\r\n      // component.entity = this;\r\n      // this.componenets[componentName] = component;\r\n      // return this;\r\n\r\n      const component = new ComponentName(this, ...args);\r\n      this.components.push(component);\r\n      return component;\r\n    }\r\n\r\n    getComponent() {}\r\n\r\n    removeComponent() {}\r\n\r\n    update() {\r\n      this.components.forEach((component) => {\r\n        component.update();\r\n      });\r\n    }\r\n  }\r\n\r\n  class Component {\r\n    constructor(entity) {\r\n      this.componentID = generateHash(string);\r\n      this.gameObject = entity;\r\n    }\r\n  }\r\n\r\n  class SkinInstance extends Component {\r\n    constructor(entity, model) {\r\n      super(entity);\r\n      this.model = model;\r\n      this.clonedScene = SkeletonUtils.clone(this.model.gltf.scene);\r\n      this.mixter = new THREE.AnimationMixter(this.clonedScene);\r\n      entity.objectRoot.add(this.clonedScene);\r\n      this.actions = {};\r\n    }\r\n    setActiveAnimation(animationName) {\r\n      const animationClip = this.model.animations[animationName];\r\n      if (!animationClip) {\r\n        console.warn(\"desired animation clip is not found in animations list\");\r\n        return;\r\n      }\r\n      const action = this.mixter.clipAction(animationClip);\r\n      this.actions[animationName] = action;\r\n      Object.values(actions).forEach((action) => {\r\n        action.enabled = false;\r\n      });\r\n      action.enabled = true;\r\n      action.reset();\r\n      action.play();\r\n    }\r\n    update() {\r\n      this.mixter.update(timeUpdate);\r\n    }\r\n  }\r\n  function init() {\r\n    manageAnimation();\r\n\r\n    const gameObject = new WorldObjectManger();\r\n  }\r\n}\r\n\r\nmain();\r\n"]}