{"version":3,"sources":["client2.js"],"names":["THREE","_interopRequireWildcard","require","_OrbitControls","_GLTFLoader","_SkeletonUtils","main","canvas","document","getElementById","renderer","WebGLRenderer","scene","Scene","background","Color","loaderElement","getElementsByClassName","ambientLight","AmbientLight","add","dirLight","DirectionalLight","position","set","aspect","window","innerWidth","innerHeight","camera","PerspectiveCamera","OrbitControls","update","globalValues","time","deltaTime","manager","LoadingManager","onLoad","style","display","_loop","_Object$values2","_i2","animationClip","forEach","value","index","model","name","gltf","animations","length","manageAnimation","gameObjectManager","createGameObject","component","Player","draw","models","boy","url","_loop2","_Object$values","_i","gltfLoader","load","Object","values","Component","gameObjects","_classCallCheck","this","gameObject","entity","WorldObjectManger","removeQueque","_createClass","key","parentObject","GameObject","push","_this$gameObjects","addQueque","apply","_toConsumableArray","updateQueue","parent","objectName","components","Array","objectRoot","Object3D","ComponentName","_len","arguments","args","_key","AnimationPlayer","_this","_possibleConstructorReturn","_getPrototypeOf","call","worldObjectManager","clonedScene","SkeletonUtils","clone","generateHash","hash","AnimationMixer","string","_inherits","char","charCodeAt","animationName","actions","action","enabled","mixer","clipAction","reset","play","_this2","modelData","modelSkinedInstance","now","delta","clock","getDelta","domElement","width","clientWidth","height","clientHeight","hasChanged","setSize","resizeRendererToDisplaySize","render","requestAnimationFrame"],"mappings":"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","file":"client2.min.js","sourcesContent":["import * as THREE from \"https://cdn.skypack.dev/three@0.128.0/build/three.module.js\";\r\nimport { OrbitControls } from \"https://cdn.skypack.dev/three@0.128.0/examples/jsm/controls/OrbitControls.js\";\r\nimport { GLTFLoader } from \"https://cdn.skypack.dev/three@0.128.0/examples/jsm/loaders/GLTFLoader.js\";\r\nimport { SkeletonUtils } from \"https://cdn.skypack.dev/three@0.129.0/examples/jsm/utils/SkeletonUtils.js\";\r\n\r\nfunction main() {\r\n  const canvas = document.getElementById(\"main-canvas\");\r\n  const renderer = new THREE.WebGLRenderer({ canvas });\r\n\r\n  const scene = new THREE.Scene();\r\n  scene.background = new THREE.Color(\"#aaaaaa\");\r\n\r\n  let loaderElement = document.getElementsByClassName(\"loader\")[0];\r\n\r\n  {\r\n    const ambientLight = new THREE.AmbientLight(0xaaaaaa);\r\n    scene.add(ambientLight);\r\n\r\n    const dirLight = new THREE.DirectionalLight(0xffffff);\r\n    dirLight.position.set(0, 200, 100);\r\n    scene.add(dirLight);\r\n  }\r\n\r\n  const windowsWidth = window.innerWidth;\r\n  const windowsHeight = window.innerHeight;\r\n\r\n  const aspect = windowsWidth / windowsHeight;\r\n  let camera = new THREE.PerspectiveCamera(90, aspect, 0.1, 40000);\r\n  camera.position.set(0, 1.5, 20);\r\n\r\n  const controls = new OrbitControls(camera, canvas);\r\n  controls.update();\r\n\r\n  const globalValues = {\r\n    time: 0,\r\n    deltaTime: 0,\r\n  };\r\n\r\n  const manager = new THREE.LoadingManager();\r\n  manager.onLoad = initialize;\r\n\r\n  const models = {\r\n    boy: {\r\n      url: \"https://threejsfundamentals.org/threejs/resources/models/knight/KnightCharacter.gltf\",\r\n    },\r\n  };\r\n\r\n  let gltfLoader = new GLTFLoader(manager);\r\n  for (let model of Object.values(models)) {\r\n    gltfLoader.load(model.url, (gltf) => {\r\n      model.gltf = gltf;\r\n    });\r\n  }\r\n\r\n  function manageAnimation() {\r\n    for (const model of Object.values(models)) {\r\n      model.animationClip = {};\r\n      model.gltf.animations.forEach((value, index) => {\r\n        model.animationClip[value.name] = model.gltf.animations[index];\r\n      });\r\n    }\r\n  }\r\n\r\n  // this is logic of @gregman to store the added and removed gameobject\r\n  // in queue rather than updating at the same instance to avoid runtime crash\r\n\r\n  class WorldObjectManger {\r\n    constructor() {\r\n      this.gameObjects = [];\r\n      this.removeQueque = {};\r\n      this.addQueque = [];\r\n    }\r\n    createGameObject(parentObject, name) {\r\n      this.gameObject = new GameObject(parentObject, name);\r\n      this.gameObjects.push(this.gameObject);\r\n      return this.gameObject;\r\n    }\r\n\r\n    removeGameObject(gameObject) {\r\n      this.removeQueque.add(gameObject);\r\n    }\r\n\r\n    updateQueue() {\r\n      if (this.removeQueque.length > 0) {\r\n        // logic to remove an element, need efficient way to remove an object by comparing\r\n        this.removeQueque = [];\r\n      }\r\n      if (this.addQueque.length > 0) {\r\n        this.gameObjects.push(...this.addQueque);\r\n        this.addQueque = [];\r\n      }\r\n    }\r\n\r\n    update() {\r\n      this.updateQueue();\r\n      this.gameObjects.forEach((gameObject) => {\r\n        gameObject.update();\r\n      });\r\n    }\r\n  }\r\n\r\n  const worldObjectManager = new WorldObjectManger();\r\n\r\n  const generateHash = (string) => {\r\n    var hash = 0;\r\n    if (string.length == 0) return hash;\r\n    for (i = 0; i < string.length; i++) {\r\n      char = string.charCodeAt(i);\r\n      hash = (hash << 5) - hash + char;\r\n      hash = hash & hash;\r\n    }\r\n    return hash;\r\n  };\r\n\r\n  class GameObject {\r\n    constructor(parent, objectName) {\r\n      this.name = objectName;\r\n      this.components = new Array();\r\n      this.objectRoot = new THREE.Object3D();\r\n      parent.add(this.objectRoot);\r\n    }\r\n\r\n    addComp(ComponentName, ...args) {\r\n      // create component in advance and pass\r\n      // if (!component.componentID) {\r\n      //   console.warn(\"this is not an instance of component\");\r\n      //   return this;\r\n      // }\r\n      // component.entity = this;\r\n      // this.componenets[componentName] = component;\r\n      // return this;\r\n\r\n      const component = new ComponentName(this, ...args);\r\n      this.components.push(component);\r\n      return component;\r\n    }\r\n\r\n    getComponent() {}\r\n\r\n    removeComponent() {}\r\n\r\n    update() {\r\n      this.components.forEach((component) => {\r\n        component.update();\r\n      });\r\n    }\r\n  }\r\n\r\n  class Component {\r\n    constructor(entity) {\r\n      // this.componentID = generateHash(string);\r\n      this.gameObject = entity;\r\n    }\r\n  }\r\n\r\n  class AnimationPlayer extends Component {\r\n    constructor(entity, model) {\r\n      super(entity);\r\n      this.model = model;\r\n      this.clonedScene = SkeletonUtils.clone(this.model.gltf.scene);\r\n      entity.objectRoot.add(this.clonedScene);\r\n      this.mixer = new THREE.AnimationMixer(this.clonedScene);\r\n      this.actions = {};\r\n    }\r\n    setActiveAnimation(animationName) {\r\n      const animationClip = this.model.animationClip[animationName];\r\n      if (!animationClip) {\r\n        console.warn(\"desired animation clip is not found in animations list\");\r\n        return;\r\n      }\r\n      Object.values(this.actions).forEach((action) => {\r\n        action.enabled = false;\r\n      });\r\n      const action = this.mixer.clipAction(animationClip);\r\n      this.actions[animationName] = action;\r\n      action.enabled = true;\r\n      // we are resetting here just to avoid case for the action with completed cycle/loop\r\n      action.reset();\r\n      action.play();\r\n    }\r\n  }\r\n\r\n  class Player extends Component {\r\n    constructor(entity, model) {\r\n      super(entity);\r\n      this.modelData = models.boy;\r\n      this.modelSkinedInstance = new AnimationPlayer(entity, this.modelData);\r\n      this.modelSkinedInstance.setActiveAnimation(\"Run\");\r\n    }\r\n    update() {\r\n      this.modelSkinedInstance.mixer.update(globalValues.deltaTime);\r\n    }\r\n  }\r\n\r\n  const gameObjectManager = new WorldObjectManger();\r\n\r\n  function initialize() {\r\n    loaderElement.style.display = \"none\";\r\n    manageAnimation();\r\n    const playerObject = gameObjectManager.createGameObject(scene, \"player\");\r\n    playerObject.addComp(Player);\r\n    draw();\r\n  }\r\n\r\n  function resizeRendererToDisplaySize(renderer) {\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n    const hasChanged = canvas.width !== width || canvas.height !== height;\r\n    if (hasChanged) {\r\n      renderer.setSize(width, height, false);\r\n    }\r\n    return hasChanged;\r\n  }\r\n\r\n  let clock = new THREE.Clock();\r\n\r\n  function draw(now) {\r\n    const delta = clock.getDelta();\r\n    globalValues.deltaTime = delta;\r\n    if (resizeRendererToDisplaySize(renderer)) {\r\n      const canvas = renderer.domElement;\r\n      camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n      camera.updateProjectionMatrix();\r\n    }\r\n    gameObjectManager.update();\r\n    renderer.render(scene, camera);\r\n    requestAnimationFrame(draw);\r\n  }\r\n}\r\n\r\nmain();\r\n"]}