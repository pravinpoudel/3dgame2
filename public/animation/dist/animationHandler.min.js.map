{"version":3,"sources":["animationHandler.js"],"names":["AnimationPlayer","entity","model","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","clonedScene","SkeletonUtils","clone","gltf","scene","objectRoot","add","mixer","THREE","AnimationMixer","actions","Component","animationName","animationClip","Object","values","forEach","action","enabled","clipAction","reset","play","console","warn","Player","_this2","modelData","models","boy","modelSkinedInstance","update","globalValues","deltaTime"],"mappings":"k6CAAMA,2BACJ,SAAAA,EAAYC,EAAQC,GAAO,IAAAC,EAAA,OAAAC,gBAAAC,KAAAL,IACzBG,EAAAG,2BAAAD,KAAAE,gBAAAP,GAAAQ,KAAAH,KAAMJ,KACDC,MAAQA,EACbC,EAAKM,YAAcC,cAAcC,MAAMR,EAAKD,MAAMU,KAAKC,OACvDZ,EAAOa,WAAWC,IAAIZ,EAAKM,aAC3BN,EAAKa,MAAQ,IAAIC,MAAMC,eAAef,EAAKM,aAC3CN,EAAKgB,QAAU,GANUhB,qBADCiB,oEASTC,GACjB,IAAMC,EAAgBjB,KAAKH,MAAMoB,cAAcD,GAC/C,GAAKC,EAAL,CAIAC,OAAOC,OAAOnB,KAAKc,SAASM,QAAQ,SAACC,GACnCA,EAAOC,SAAU,IAEnB,IAAMD,EAASrB,KAAKW,MAAMY,WAAWN,IACrCjB,KAAKc,QAAQE,GAAiBK,GAnB5B1B,SAoBe,EAEjB0B,EAAOG,QACPH,EAAOI,YAXLC,QAAQC,KAAK,mEAebC,kBA1BuB,SAAAA,EAAAhC,EAAAC,GAAA,IAAAgC,EAAA,OAAA9B,gBAAAC,KAAA4B,IA4BzBC,EAAA5B,2BAAAD,KAAAE,gBAAA0B,GAAAzB,KAAAH,KAAMJ,KA3BNkC,UAAAC,OAAAC,IACAH,EAAAI,oBAAA,IAAAtC,gBAAAC,EAAAiC,EAAAC,WACAD,EAAAI,oBAAmB5B,mBAAoB,OAHdwB,qBA0BRd,0DApBjBf,KAAAiC,oBAAAtB,MAAAuB,OAAAC,aAAAC","file":"animationHandler.min.js","sourcesContent":["class AnimationPlayer extends Component {\r\n  constructor(entity, model) {\r\n    super(entity);\r\n    this.model = model;\r\n    this.clonedScene = SkeletonUtils.clone(this.model.gltf.scene);\r\n    entity.objectRoot.add(this.clonedScene);\r\n    this.mixer = new THREE.AnimationMixer(this.clonedScene);\r\n    this.actions = {};\r\n  }\r\n  setActiveAnimation(animationName) {\r\n    const animationClip = this.model.animationClip[animationName];\r\n    if (!animationClip) {\r\n      console.warn(\"desired animation clip is not found in animations list\");\r\n      return;\r\n    }\r\n    Object.values(this.actions).forEach((action) => {\r\n      action.enabled = false;\r\n    });\r\n    const action = this.mixer.clipAction(animationClip);\r\n    this.actions[animationName] = action;\r\n    action.enabled = true;\r\n    // we are resetting here just to avoid case for the action with completed cycle/loop\r\n    action.reset();\r\n    action.play();\r\n  }\r\n}\r\n\r\nclass Player extends Component {\r\n  constructor(entity, model) {\r\n    super(entity);\r\n    this.modelData = models.boy;\r\n    this.modelSkinedInstance = new AnimationPlayer(entity, this.modelData);\r\n    this.modelSkinedInstance.setActiveAnimation(\"Run\");\r\n  }\r\n  update() {\r\n    this.modelSkinedInstance.mixer.update(globalValues.deltaTime);\r\n  }\r\n}\r\n"]}